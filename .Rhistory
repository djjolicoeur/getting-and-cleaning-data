}
}
cor(dat)
}
corr("~/Downloads/specdata")
corr <- function(directory, threshold = 0){
files <- list.files(directory, full.names= TRUE)
dat <- data.frame()
for (f in files){
temp <- na.omit(read.csv(f))
if (nrow(temp) >= threshold){
dat <- rbind(dat, temp[,c('sulfate','nitrate')])
}
}
cor(dat)
}
cr <- corr("~/Downloads/specdata", 150)
summary(cr)
corr <- function(directory, threshold = 0){
files <- list.files(directory, full.names= TRUE)
dat <- data.frame()
for (f in files){
temp <- na.omit(read.csv(f))
if (nrow(temp) >= threshold){
dat <- rbind(dat, temp[,c('sulfate','nitrate')])
}
}
cor(dat$sulfate, dat$nitrate)
}
cr <- corr("~/Downloads/specdata", 150)
summary(cr)
corr <- function(directory, threshold = 0){
files <- list.files(directory, full.names= TRUE)
ret_vec <- c()
for (f in files){
temp <- na.omit(read.csv(f))
if (nrow(temp) >= threshold){
ret_vec <- c(ret_vec, (cor(temp)))
}
}
ret_vec
}
cr <- corr("~/Downloads/specdata", 150)
corr <- function(directory, threshold = 0){
files <- list.files(directory, full.names= TRUE)
ret_vec <- c()
for (f in files){
dat <- na.omit(read.csv(f))
print(dat)
if (nrow(dat) >= threshold){
ret_vec <- c(ret_vec, (cor(dat)))
}
}
ret_vec
}
cr <- corr("~/Downloads/specdata", 150)
corr <- function(directory, threshold = 0){
files <- list.files(directory, full.names= TRUE)
ret_vec <- c()
for (f in files){
dat <- na.omit(read.csv(f))
if (nrow(dat) >= threshold){
ret_vec <- c(ret_vec, cor(dat))
}
}
ret_vec
}
cr <- corr("~/Downloads/specdata", 150)
corr <- function(directory, threshold = 0){
files <- list.files(directory, full.names= TRUE)
ret_vec <- c()
for (f in files){
dat <- na.omit(read.csv(f))
if (nrow(dat) >= threshold){
ret_vec <- c(ret_vec, cor(dat$sulfate, dat$nitrate))
}
}
ret_vec
}
cr <- corr("~/Downloads/specdata", 150)
head(cr)
summary(cr)
cr <- corr("~/Downloads/specdata", 150)
summary(cr)
cr <- corr("specdata", 400)
cr <- corr("~/Downloads/specdata", 400)
summary(cr)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
1
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
cube <- function(x,n){}
cube <- function(x,n){ x^3}
cube(3)
x <- 1:10
if(x < 5) {x <- 0}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
z
x <- 5
y <- if(x <3) {NA} else {10}
y
m <- matrix(c(1,2,3,4),2,2)
m
inv(m)
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y){
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get,
setinverse = setinverse, getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getinverse
if(!is.null(i)){
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data)
x$setinverse(i)
i
}
m
x <- makeCacheMatrix(m)
m
x
cacheSolve(x)
x$getinverse()
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y){
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get,
setinverse = setinverse, getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getinverse()
if(!is.null(i)){
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data)
x$setinverse(i)
i
}
cacheSolve(x)
cacheSolve(x)
cacheSolve(x)
load("ProgrammingAssignment2/cachematrix.R")
source("ProgrammingAssignment2/cachematrix.R")
source("ProgrammingAssignment2/cachematrix.R")
makeCacheMatrix(m)
y <- makeCacheMatrix(m)
cacheSolve(y)
cacheSolve(y)
library(datasets)
data(iris)
?iris
iris.first
iris[,1]
iris[1,]
iris[iris$Species == "virginica"]
subset(iris,Species == "virginica")
sub <- subset(iris,Species == "virginica")
sub
sub[Sepal.length]
colMeans(subs)
colMeans(sub)
colMeans(sub$Sepal.Length)
sub
colMeans(sub)
colMeans(sub[,-1])
colMeans(sub[,5])
mean(sub[,0])
mean(sub[,1])
mean(sub[,2])
sub
sub[,2]
sub[,1]
mean(sub[,1])
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
data($mtcars)
data(mtcars)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
split(mtcars, mtcars$cyl)
lapply(mtcars, mean)
sapply(mtcars, cyl, mean)
?mtcars
sapply(split(mtcars$hp,mtcars$cyl),mean)
hp <- sapply(split(mtcars$hp,mtcars$cyl),mean)
hp
hp$8
hp[2]
hp[2] - hp[1]
debug(ls)
ls
ls
?ls
ls(iris)
ls
exit
debug
Q
ls
q
library(dplyr)
library(XLConnect)
dat <- readWorksheetFromFile("~/Downloads/getdata-data-DATA.gov_NGAP.xlsx", sheet=1, startRow=18,endRow=23,startColumn=7,endColumn=15)
dat <- readWorksheetFromFile("~/Downloads/getdata-data-DATA.gov_NGAP.xlsx", sheet=1, startRow=18,endRow=23,startCol=7,endCol=15)
dat
sum(dat$Zip*dat$Ext,na.rm=T)
library(xml)
install.packages("xml")
install.packages("XML")
library(XML)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml ", "~/qrest.xml")
rest-data <- xmlTreeParse("~/qrest.xml", useInternal=TRUE)
doc <- xmlTreeParse("~/qrest.xml", useInternal=TRUE)
rootNode <- xmlRoot(doc)
rootNode
xmlName(rootNode)
zips <- xpathSApply(rootNode, "//zipcode", xmlValue)
zips
scoped <- xpathSApply(rootNode, "/row[@zipcode='21231']", xmlValue)
scoped
scoped <- xpathSApply(rootNode, "//row[@zipcode='21231']", xmlValue)
scoped
zips <- xpathSApply(rootNode, "//zipcode", xmlValue)
zips[zips=="21321"]
zips
zips[zips=="21231"]
length(zips[zips=="21231"])
install.packages("data.table")
library(data.table)
DT <- fread("~/Downloads/getdata-data-ss06pid.csv")
DT[,mean(pwgtp15,by=SEX)]
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
mean(DT$pwgtp15,by=DT$SEX)
tapply(DT$pwgtp15,DT$SEX,mean)
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
mean(DT$pwgtp15,by=DT$SEX)
res <- mean(DT$pwgtp15,by=DT$SEX)
res
length(res)
DT[,mean(pwgtp15),by=SEX]
system.time(DT[,mean(pwgtp15),by=SEX])
vls <- read.csv("~/qData.csv")
nrow(filter(vls, VAL == 24))
setwd("~/ExData_Plotting1/")
?unzip
?write.csv
source("getdata.R")
install.packages("lubridate")
source("getdata.R")
source("getdata.R")
d <- ensureAndGetData()
source("getdata.R")
d <- ensureAndGetData()
?download.file
source("getdata.R")
d <- ensureAndGetData()
?unzip
source("getdata.R")
d <- ensureAndGetData()
source("getdata.R")
d <- ensureAndGetData()
source("getdata.R")
d <- ensureAndGetData()
source("getdata.R")
d <- ensureAndGetData()
source("getdata.R")
d <- ensureAndGetData()
source("getdata.R")
d <- ensureAndGetData()
source("getdata.R")
d <- ensureAndGetData()
source("getdata.R")
d <- ensureAndGetData()
source("getdata.R")
d <- ensureAndGetData()
source("getdata.R")
d <- ensureAndGetData()
d <- ensureAndGetData()
head(d)
?hms
d[1,d$Time]
d[1,Time]
d[1,d$Time][1]
d[1,d$Time][,1]
d[1,d$Time][1,]
d$Time
hms("17:24:00")
dmy("1/2/2007") + hms("17:24:00")
source("getdata.R")
clean()
d <- ensureAndGetData()
d$Time
d$Date
d$Time
d$DateTime
d$Time
head(d)
tail(d)
filter(d, hour(Time) == 2)
as.Date(d$DateTime)
clean()
source("getdata.R")
d <- ensureAndGetData()
d$DateTime
d$Time
hist(d$Global_active_power, main="Global Active Power", xlab="Global Active Power (kw)", col="red")
source("plot1.R")
mkPlotOne()
source("plot1.R")
mkPlotOne()
plot(d$DateTime, d$Global_active_power, ylab="Global Active Power (kilowatts)", xlab="", type="l")
day(d$Date)
wday(d$Date)
wday(d$Date, label = TRUE)
clean
clean()
d <- ensureAndGetData()
plot(d$DOW, d$Global_active_power, ylab="Global Active Power (kilowatts)", xlab="", type="l")
d$DOW
d$DOW
d$Date
d$DateTime
clean()
source("getdata.R")
d <- ensureAndGetData()
d$DOW
plot(d$DOW, d$Global_active_power, ylab="Global Active Power (kilowatts)", xlab="", type="l")
plot(d$DOW, d$Global_active_power, ylab="Global Active Power (kilowatts)", xlab="", type=l)
plot(d$DOW, d$Global_active_power, ylab="Global Active Power (kilowatts)", xlab="", type='l')
plot(d$DOW, d$Global_active_power, ylab="Global Active Power (kilowatts)", xlab="", type='o')
lines(d$DOW, d$Global_active_power, ylab="Global Active Power (kilowatts)", xlab="", type='o')
lines(d$DOW, d$Global_active_power, ylab="Global Active Power (kilowatts)", xlab="", type='l')
plot(x = d$DOW, y = d$Global_active_power, ylab="Global Active Power (kilowatts)", xlab="", type='l')
plot(x=d$DOW, y=d$Global_active_power,type='l', ylab="Global Active Power (kilowatts)", xlab="")
plot(x=(d$DOW), y=(d$Global_active_power),type='l', ylab="Global Active Power (kilowatts)", xlab="")
plot(x=(d$DOW), y=(d$Global_active_power),type="l", ylab="Global Active Power (kilowatts)", xlab="")
clean()
source("getdata.R")
d <- ensureAndGetData()
plot(x=(d$DOW), y=(d$Global_active_power),type="l", ylab="Global Active Power (kilowatts)", xlab="")
plot(x=(d$DOW), y=(d$Global_active_power),type="l", ylab="Global Active Power (kilowatts)", xlab="")
plot(x=(d$DOW), y=(d$Global_active_power),type="l", ylab="Global Active Power (kilowatts)", xlab="")
d$Global_active_power
plot(x=(d$DOW), y=d$Global_active_power,type="l", ylab="Global Active Power (kilowatts)", xlab="")
epc <- read.table("household_power_consumption.txt",header=T,sep=";",colClasses=c("character","character","double","double","double","double","double","double","numeric"),na.strings="?")
epc$DateTime = paste(epc$Date, epc$Time)
epc$DateTime = as.POSIXlt(epc$DateTime,format="%d/%m/%Y %H:%M:%S")
epc$Date = NULL
epc$Time = NULL
plot(x=(subepc$DateTime),y=subepc$Global_active_power,type="l",ylab="Global Active Power (kilowatts)",xlab="")
subepc <- subset(epc,DateTime$year==107 & DateTime$mon==1 & (DateTime$mday==1 | DateTime$mday==2))
plot(x=(subepc$DateTime),y=subepc$Global_active_power,type="l",ylab="Global Active Power (kilowatts)",xlab="")
clean()
d <- ensureAndGetData()
plot(x=(d$DateTime), y=d$Global_active_power,type="l", ylab="Global Active Power (kilowatts)", xlab="")
d$DateTime
subepc$DateTime
clean()
source("getdata.R")
d <- ensureAndGetData()
source("getdata.R")
clean()
d <- ensureAndGetData()
d$DateTime
plot(x=(d$DateTime), y=d$Global_active_power,type="l", ylab="Global Active Power (kilowatts)", xlab="")
plot(x=(d$DateTime), y=d$Global_active_power,type="l", ylab="Global Active Power (kilowatts)", xlab="")
source("plot2.R")
mkPlotTwo()
mkPlotOne()
plot(x=(d$DateTime),y=d$Sub_metering_1,type="l",ylab="Energy sub metering",xlab="")
lines(x=(d$DateTime),y=d$Sub_metering_2,col="red")
lines(x=(d$DateTime),y=d$Sub_metering_3,col="blue")
legend("topright",c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),bty="l",col=c("black","red","blue"),lwd=2,cex=0.7)
source("plot3.R")
mkPlotThree()
sourc("plot4.R")
source("plot4.R")
mkPlotFour()
source("getdata.R")
clean()
mkPlotOne()
?png
clean()
10 % 0
10 %% 0
10 %% 1
10 %% 2
10 %% 3
10 %% 4
10 %% 5
10 %% 6
10 %% 7
10 %% 8
10 %% 9
10 %% 10
300 * 12
csvd <- read.csv("~/Downloads/getdata-data-ss06pid.csv")
acs <- read.csv("~/Downloads/getdata-data-ss06pid.csv")
library(sqldf)
install.packages("sqldf")
library(sqldf)
sqldf("select pwgtp1 from acs where AGEP < 50")
library(httr)
html <- GET("http://biostat.jhsph.edu/~jleek/contact.html")
html
c <- content(html,as="text")
c
c <- content(html)
c
c <- content(html,as="text")
parsedHtml = htmlParse(c,asText=TRUE)
c
parsedHtml
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
html <- readLines(con)
html
nchar(html[10])
nchar(html[20])
nchar(html[30])
nchar(html[100])
x <- read.fwf("~/Downloads/getdata-wksst8110.for", skip=4, fwf_widtths=c(12, 7,4,9,4,9,4,9,4))
x <- read.fwf("~/Downloads/getdata-wksst8110.for", skip=4, fwf_widths=c(12, 7,4,9,4,9,4,9,4))
x <- read.fwf("~/Downloads/getdata-wksst8110.for", skip=4, widths=c(12, 7,4,9,4,9,4,9,4))
x
x[4]
sum(x[4])
sum(x[4]) + sum(x[9])
sum(x[9])
x[9]
sum(x[4]) + sum(x[9])
sum(x[4])
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
g <- ggplot(movies, aes(votes, rating))
print(g)
movies
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + stats_smooth("loess")
cc <- read.csv("~/Downloads/Consumer_Complaints.csv")
head(cc)
unique(cc$Product)
plot(cc$Product)
plot(cc$Company)
ggplot(Company, facets = Product)
ggplot(cc$Company, facets = Product)
ggplot(Company, facets = Product)
ggplot(. ~ Company, facets = Product)
cos <- unique(cc$Company)
cos
9.8 / 100
0.10 * 30
0.3 * 120000
0.03 * 120000
0.03 * 100000
setwd("~/getting-and-cleaning-data/")
